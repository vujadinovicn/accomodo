package cep;
import com.ftn.sbnz.model.models.Booking;
import com.ftn.sbnz.model.models.Traveler;
import com.ftn.sbnz.model.models.Discount;
import com.ftn.sbnz.model.models.Review;
import com.ftn.sbnz.model.enums.BookingStatus;
import com.ftn.sbnz.model.enums.EmailNotificationType;
import com.ftn.sbnz.model.events.BookingAcceptedEvent;
import com.ftn.sbnz.model.events.BookingDeniedEvent;
import com.ftn.sbnz.model.events.ListingViewedEvent;
import com.ftn.sbnz.model.events.BookingEvent;
import com.ftn.sbnz.model.events.BookingEmailEvent;
import com.ftn.sbnz.model.events.DiscountEmailEvent;
import com.ftn.sbnz.model.events.NegativeReviewEvent;

declare MaliciousTravelerEvent
    @role(event)
    travelerId: Long
end 

// rule "Booking has happened"
//     no-loop true
//     when
//         $booking: Booking($bookingId: id, status == BookingStatus.PENDING)
//         not BookingAcceptedEvent(bookingId == $bookingId)
//         not BookingDeniedEvent(bookingId == $bookingId)
//     then
//         insert(new BookingEvent($bookingId));
//         System.out.println("Nov booking je kreiran!");
// end

rule "Send notification to owner after booking event"
    no-loop true
    when
        $BookingEvent: BookingEvent($bookingId: bookingId)
        not BookingAcceptedEvent(bookingId == $bookingId)
        not BookingDeniedEvent(bookingId == $bookingId)
    then
        insert(new BookingEmailEvent(null, null, EmailNotificationType.BOOKING_CREATED));
        System.out.println("Posalji notifikaciju owneru!");
end

rule "Booking accepted by owner"
    no-loop true
    when
        $bookingAcceptedEvent: BookingAcceptedEvent($bookingId: bookingId)
        $booking: Booking(id == $bookingId, 
            status == BookingStatus.PENDING,
            $listing: listing,
            $traveler: traveler
        )
    then
        modify($booking){
            setStatus(BookingStatus.ACCEPTED)
        }
        insert(new BookingEmailEvent($traveler.getEmail(), $listing.getTitle(), EmailNotificationType.BOOKING_ACCEPTED));
        System.out.println("Posalji notifikaciju traveleru da je booking prihvacen!");
end

rule "Booking denied by owner"
    no-loop true
    when
        $bookingDeniedEvent: BookingDeniedEvent($bookingId: bookingId, $reason: reason)
        $booking: Booking(id == $bookingId, 
            status == BookingStatus.PENDING,
            $listing: listing,
            $traveler: traveler
        )
    then
        modify($booking){
            setStatus(BookingStatus.DENIED)
        }
        insert(new BookingEmailEvent($traveler.getEmail(), $listing.getTitle(), EmailNotificationType.BOOKING_DENIED));
        System.out.println("Posalji notifikaciju traveleru da je booking odbijen zbog: " + $reason);
end

rule "Add listing to favorite listings on view"
when
    $event: ListingViewedEvent($traveler: traveler, $listing: listing)
    not (Traveler(favoriteListings contains $listing) from $traveler)
then
    modify($traveler) {
        getFavoriteListings().add($listing)
    }
    System.out.println("Listing " + $listing.getTitle() + " added to favorites for traveler " + $traveler.getEmail());
end

rule "Notify traveler on favorite listing price drop"
when
    $discount: Discount($listing: listing)
    Traveler($traveler: this, favoriteListings contains $listing)
    // Traveler($traveler: this, id==1)
then
    String notificationMessage = "You're in luck! The booking you were checking out, " + $listing.getTitle() + ", is available at an even better price! Hurry to see the new offer, it ends " + $discount.getValidTo();
    // sendNotification($traveler, notificationMessage);
    System.out.println("Discount notification sent to traveler " + $traveler.getEmail() + " for listing " + $listing.getTitle());
    insert(new DiscountEmailEvent($traveler.getEmail(), $listing.getTitle(), notificationMessage));
end

rule "Traveler gave negative review"
when
    $review: Review(rating < 5)
    not NegativeReviewEvent(review == $review)
then
    insert(new NegativeReviewEvent($review));
end

rule "Assign malicious user flag"
no-loop true
when
    $traveler: Traveler(isMalicious() == false)
    $totalReviews: Number(intValue > 5) from accumulate(
        $review: Review(traveler.id == $traveler.id),
        count($review)
    )
    Number(intValue > (0.8 * $totalReviews.intValue())) from accumulate(
        $negreview: NegativeReviewEvent(review.traveler.id == $traveler.id) over window:time(90d),
        count($negreview)
    )
then
    modify($traveler) {
        setMalicious(true)
    }
    System.out.println("Traveler " + $traveler.getEmail() + " has been flagged as a malicious traveler.");
end

rule "Malicious traveler gave another negative review"
no-loop true
when
    NegativeReviewEvent($traveler: review.traveler)
    eval($traveler.isMalicious())
then
    System.out.println("Malicious traveler is on it again! Alert the admin to double chech.");
end