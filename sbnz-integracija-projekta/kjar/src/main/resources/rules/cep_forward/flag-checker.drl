package cep_forward;
import java.util.List;
import java.time.LocalDateTime;
import com.ftn.sbnz.model.models.Booking;
import com.ftn.sbnz.model.models.Traveler;
import com.ftn.sbnz.model.models.Listing;
import com.ftn.sbnz.model.enums.BookingStatus;
import com.ftn.sbnz.model.enums.EmailNotificationType;
import com.ftn.sbnz.model.events.ReservationEvent;
import com.ftn.sbnz.model.events.BookingEvent;
import com.ftn.sbnz.model.events.BookingEmailEvent;
import com.ftn.sbnz.model.models.Review;
import com.ftn.sbnz.model.events.NegativeReviewEvent;
import org.drools.core.time.TimeUtils.*;


import java.util.Date;

rule "Remove irresponsible traveler flag"
    timer( cron: 0 0 0 1 * ? )
no-loop true
when
    $traveler: Traveler(isIressponsible() == true)
    $rCount: Number(intValue <= 2) from accumulate(
        $event: ReservationCanceledEvent(booking.traveler.id == $traveler.id) over window:time(15s),
        count($event)
    )
then
    modify($traveler) {
        setIressponsible(false);
    }
    modify($traveler){
        setDateOfIrresponsible(new Date());
    }
    System.out.println("Traveler irresponsible flag has been changed!");
end

rule "Check malicious traveler flag"
    timer( cron: 0 0 0 1 * ? )
no-loop true
when
    $traveler: Traveler(isMalicious() == true)
    $totalReviews: Number(intValue > 5) from accumulate(
        $review: Review(traveler.id == $traveler.id),
        count($review)
    )
    $mCount : Number(intValue() <= (0.8 * $totalReviews.intValue())) from accumulate(
        $negreview: NegativeReviewEvent(review.traveler.id == $traveler.id) over window:time(90d),
        count($negreview)
    )
then
    modify($traveler) {
            setMalicious(false);
    }
    System.out.println("Traveler malicious flag has been checked!");
end