template header
level
bookingCountThreshold
totalSpentThreshold
daysThreshold
salience

package rules;

import com.ftn.sbnz.model.models.Booking;
import com.ftn.sbnz.model.enums.BookingStatus;
import com.ftn.sbnz.model.events.BookingAcceptedEvent;
import com.ftn.sbnz.model.events.ReservationAcceptedEvent;
import com.ftn.sbnz.model.events.BookingEmailEvent;
import com.ftn.sbnz.model.enums.EmailNotificationType;
import com.ftn.sbnz.model.events.ChronoCheckReservationEvent;
import com.ftn.sbnz.model.models.Traveler;
import com.ftn.sbnz.model.enums.TravelerLevel;
import java.time.LocalDate;
import java.util.List;

template "user-levels-template"

rule "Promote to @{level}"
    timer( cron: 10 0 0 1 * ? )
salience @{salience}
no-loop true
when
    $traveler: Traveler()
    $bookings: List() from collect(
        Booking(
            traveler == $traveler,
            status == BookingStatus.ACCEPTED,
            $startDate: startDate,
            eval(daysBetweene($startDate, dateNow) <= @{daysThreshold})
        )
    )
    $bookingCount: Number() from accumulate(
        $booking: Booking() from $bookings,
        count($booking)
    )
    $totalSpent: Number() from accumulate(
        $bo: Booking() from $bookings,
        sum($bo.getPricePerNight() * daysBetweene($bo.getStartDate(), $bo.getEndDate()))
    )
    eval($bookingCount.intValue() > @{bookingCountThreshold} && $totalSpent.doubleValue() > @{totalSpentThreshold})
then
    modify($traveler) {
        setLevel(@{level});
    }
    System.out.println("Traveler changed to " + @{level});
end

end template

function int daysBetweene(java.util.Date startDate, java.util.Date endDate) {
    java.time.LocalDate startLocalDate = startDate.toInstant().atZone(java.time.ZoneId.systemDefault()).toLocalDate();
    java.time.LocalDate endLocalDate = endDate.toInstant().atZone(java.time.ZoneId.systemDefault()).toLocalDate();
    return (int) java.time.temporal.ChronoUnit.DAYS.between(startLocalDate, endLocalDate);
}